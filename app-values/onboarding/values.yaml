replicaCount: 1
image:
  repository: code.europa.eu:4567/simpl/simpl-open/development/iaa/onboarding
  pullPolicy: Always
  tag: 0.0.5-256.hotfix.219d6217
imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 8080

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: 
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  limits:
    cpu: 500m
    memory: 1Gi
  requests:
    cpu: 500m
    memory: 1Gi

livenessProbe:
  httpGet:
    path: "/actuator/health/liveness"
    port: http
  initialDelaySeconds: 120
  periodSeconds: 5
  failureThreshold: 10
readinessProbe:
  httpGet:
    path: "/actuator/health/readiness"
    port: http
  initialDelaySeconds: 120
  periodSeconds: 5
  failureThreshold: 10

autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 1
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: 
  - name: ejbca-rest-api-client-cert
    secret:
      secretName: ejbca-rest-api-secret
      items:
      - key: client-cert
        path: keystore.p12
  - name: ejbca-rest-api-truststore
    secret:
      secretName: ejbca-rest-api-secret
      items:
      - key: ca-truststore
        path: truststore.jks
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts:  
  - name: ejbca-rest-api-client-cert
    mountPath: "/etc/certs/keystore.p12"
    subPath: "keystore.p12"
    readOnly: true
  - name: ejbca-rest-api-truststore
    mountPath: "/etc/certs/truststore.jks"
    subPath: "truststore.jks"
    readOnly: true
envFrom:
  - configMapRef:
      name: onboarding-configmap

env:
  SPRING_DATASOURCE_URL: "jdbc:postgresql://postgresql.{{ .Release.Namespace }}.svc.cluster.local:5432/onboarding"
  SPRING_DATASOURCE_USERNAME: "onboarding"
  SPRING_DATASOURCE_PASSWORD: "onboarding"

nodeSelector: {}

tolerations: []

affinity: {}

ejbca:
  keystore:
    base64: "dGVzdA=="
    password: "THc77QkT6kf1m2O46DYi9pjZ"
  truststore:
    base64: "dGVzdA=="
    password: "ManagementCA"
  enrollConfig:
    url: "https://ejbca-community-helm.{{ .Release.Namespace }}.svc.cluster.local:30443"
    profileName: "Onboarding TLS Profile"
    endEntityName: "Onboarding TLS Profile"
    caName: "OnBoardingCA"