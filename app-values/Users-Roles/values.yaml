replicaCount: 1

global:
  profile: authority

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a services account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the services account
  annotations: {}
  # The name of the services account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: 1001

service:
  type: ClusterIP
  port: 8080

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: 
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  limits:
    cpu: 500m
    memory: 1Gi
  requests:
    cpu: 500m
    memory: 1Gi

livenessProbe:
  httpGet:
    path: "/actuator/health/liveness"
    port: http
  initialDelaySeconds: 120
  periodSeconds: 5
  failureThreshold: 10
readinessProbe:
  httpGet:
    path: "/actuator/health/readiness"
    port: http
  initialDelaySeconds: 120
  periodSeconds: 5
  failureThreshold: 10

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 1
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes:
  - name: spring-config
    configMap:
      name: users-roles-spring-configmap


# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts:
  - name: spring-config
    mountPath: /config/

envFrom:
  - configMapRef:
      name: users-roles-configmap

nodeSelector: {}

tolerations: []

affinity: {}

db:
  username: "usersroles"
  password: "usersroles"

keycloak:
  master:
    user: "admin"
    password: "admin"
    realm: "authority"
  clientToRealmRoleMigration:
    enabled: true # set to true to import realm roles from client roles
    clientIds: "['frontend-cli']"

databaseSeeding:
  roleIdentityAttributesMapping:
    # If you want to start with an empty identity attributes table, set this to false.
    # Ff enabled is set to true and filePath is commented or empty the table will be initialized with the default seeding file.
    enabled: true 

kafkaConfig:
  spring:
    kafka:
      consumer:
        properties:
          security.protocol: SASL_PLAINTEXT
          sasl.mechanism: PLAIN
          sasl.jaas.config: org.apache.kafka.common.security.plain.PlainLoginModule required username="${KAFKA_USER:iaa}" password="${KAFKA_PASSWORD:eezooS4Aideth1teaDeey3ohghohwohk}";
      admin:
        auto-create: true
