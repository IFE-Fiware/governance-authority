apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: {{ .Values.argocd.appname }}
  namespace: {{ .Values.argocd.namespace }}
spec:
  project: {{ .Values.project }}
  destination:
    server: {{ .Values.cluster.address }}
    namespace: {{ .Values.cluster.namespace }}
  sources:
  - repoURL: {{ .Values.values.repo_URL }}
    targetRevision: {{ .Values.values.branch }}
    ref: values
  - repoURL: {{ .Values.keycloak.repo_URL }}
    targetRevision: {{ .Values.keycloak.targetRevision }}
    chart: {{ .Values.keycloak.chart_name }}
    helm:
      valueFiles:
        {{- range .Values.keycloak.valueFiles }}
        - $values/app-values/Keycloak/{{ . }}
        {{- end }}
      values: |
        fullnameOverride: {{ .Values.keycloak.nameOverride }}
        apiUrl: "https://participant.be.{{ .Values.namespaceTag }}.{{ .Values.domainSuffix }}"
        podAnnotations:
          vault.security.banzaicloud.io/vault-addr: {{ .Values.hashicorp.service }}
          vault.security.banzaicloud.io/vault-role: {{ .Values.hashicorp.role }}
        auth:
          adminPassword: "vault:{{ .Values.hashicorp.secretEngine }}/data/{{ .Values.cluster.namespace }}-keycloak#admin"
        externalDatabase:
          host: "pg-cluster.{{ .Values.cluster.commonToolsNamespace }}.svc.cluster.local"
          database: {{ .Values.cluster.namespace }}_keycloak
          user: {{ .Values.cluster.namespace }}_keycloak
          password: "vault:{{ .Values.hashicorp.secretEngine }}/data/{{ .Values.cluster.namespace }}-postgres-passwords#{{ .Values.cluster.namespace }}-keycloak"
        extraEnvVars:
        - name: KC_HOSTNAME_ADMIN
          value: "https://authority.be.{{ .Values.namespaceTag }}.{{ .Values.domainSuffix }}/auth"
        - name: KC_HOSTNAME
          value: "https://authority.be.{{ .Values.namespaceTag }}.{{ .Values.domainSuffix }}/auth"
        - name: USERS_ROLES_BASE_URL
          value: "http://users-roles.{{ .Values.cluster.namespace }}.svc.cluster.local:8080"
        - name: KEYCLOAK_BASE_URL
          value: "https://authority.be.{{ .Values.namespaceTag }}.{{ .Values.domainSuffix }}/auth"
        - name: REALM
          value: "authority"
        - name: KEYCLOAK_EXTRA_ARGS
          value: --import-realm
        {{- if .Values.keycloak.resourcesPreset }}
        resourcesPreset: {{ .Values.keycloak.resourcesPreset }}
        {{- end }}
        {{- if .Values.keycloak.resources }}
        resources: {{- toYaml .Values.keycloak.resources | nindent 10 }}
        {{- end }}
  - repoURL: {{ .Values.ejbca.repo_URL }}
    targetRevision: {{ .Values.ejbca.targetRevision }}
    chart: {{ .Values.ejbca.chart_name }}
    helm:
      valueFiles:
        {{- range .Values.ejbca.valueFiles }}
        - $values/app-values/ejbca/{{ . }}
        {{- end }}
      values: |
        podAnnotations:
          vault.security.banzaicloud.io/vault-addr: {{ .Values.hashicorp.service }}
          vault.security.banzaicloud.io/vault-role: {{ .Values.hashicorp.role }}
        fullnameOverride: {{ .Values.ejbca.fullnameOverride }}
        hostname: &hostname ejbca-community-helm.{{ .Values.cluster.namespace }}.svc.cluster.local
        ejbca:
          env:
            HTTPSERVER_HOSTNAME: *hostname
            DATABASE_JDBC_URL: "jdbc:postgresql://pg-cluster.{{ .Values.cluster.commonToolsNamespace }}.svc.cluster.local:5432/{{ .Values.cluster.namespace }}_ejbca"
            DATABASE_USER: {{ .Values.cluster.namespace }}_ejbca
            DATABASE_PASSWORD: vault:{{ .Values.hashicorp.secretEngine }}/data/{{ .Values.cluster.namespace }}-postgres-passwords#{{ .Values.cluster.namespace }}-ejbca
          initContainers:
          - name: ejbca-init
            image: code.europa.eu:4567/simpl/simpl-open/development/iaa/ejbca-preconfig:1.0.0
            imagePullPolicy: IfNotPresent
            securityContext: {}
            env:
              - name: HTTPSERVER_HOSTNAME
                value: *hostname
              - name: MANAGEMENT_END_ENTITY_USERNAME
                value: SuperAdmin
              - name: MANAGEMENT_END_ENTITY_PASSWORD
                value: vault:{{ .Values.hashicorp.secretEngine }}/data/{{ .Values.cluster.namespace }}-ejbca#keystorepass
              - name: DATABASE_JDBC_URL
                value: "jdbc:postgresql://pg-cluster.{{ .Values.cluster.commonToolsNamespace }}.svc.cluster.local:5432/{{ .Values.cluster.namespace }}_ejbca"
              - name: DATABASE_USER
                value: {{ .Values.cluster.namespace }}_ejbca
              - name: DATABASE_PASSWORD
                value: vault:{{ .Values.hashicorp.secretEngine }}/data/{{ .Values.cluster.namespace }}-postgres-passwords#{{ .Values.cluster.namespace }}-ejbca
              - name: T1_GATEWAY
                value: authority.be.{{ .Values.namespaceTag }}.{{ .Values.domainSuffix }}
              - name: NAMESPACE
                value: {{ .Values.cluster.namespace }}
            command:
            - "./entrypoint.sh" 
        nginx:
          host: *hostname
        {{- if .Values.ejbca.resources }}
        resources: {{- toYaml .Values.ejbca.resources | nindent 10 }}
        {{- end }}
  - repoURL: "https://code.europa.eu/api/v4/projects/{{ .Values.tier1_gateway.projectID }}/packages/helm/stable"
    path: ''
    targetRevision: {{ .Values.tier1_gateway.targetRevision }}
    chart: {{ .Values.tier1_gateway.chart_name }}
    helm:
      valueFiles:
        {{- range .Values.tier1_gateway.valueFiles }}
        - $values/app-values/tier1-gateway/{{ . }}
        {{- end }}
      values: |
        hostT1: authority.be.{{ .Values.namespaceTag }}.{{ .Values.domainSuffix }}
        cors:
          allowOrigin: https://authority.fe.{{ .Values.namespaceTag }}.{{ .Values.domainSuffix }},https://authority.be.{{ .Values.namespaceTag }}.{{ .Values.domainSuffix }},http://localhost:4202,http://localhost:3000
        ingress:
          issuer: {{ .Values.cluster.issuer }}
        usersRolesUrl: http://users-roles.{{ .Values.cluster.namespace }}.svc.cluster.local:8080
        securityAttributesProviderUrl: http://security-attributes-provider.{{ .Values.cluster.namespace }}.svc.cluster.local:8080
        keycloakUrl: http://keycloak.{{ .Values.cluster.namespace }}.svc.cluster.local
        onboardingUrl: http://onboarding.{{ .Values.cluster.namespace }}.svc.cluster.local:8080
        ejbcaUrl: http://ejbca-community-helm.{{ .Values.cluster.namespace }}.svc.cluster.local:30080
        identityProviderUrl: http://identity-provider.{{ .Values.cluster.namespace }}.svc.cluster.local:8080
        authenticationProviderUrl: http://authentication-provider.{{ .Values.cluster.namespace }}.svc.cluster.local:8080
        {{- if .Values.tier1_gateway.resources }}
        resources: {{- toYaml .Values.tier1_gateway.resources | nindent 10 }}
        {{- end }}
  - repoURL: "https://code.europa.eu/api/v4/projects/{{ .Values.simpl_fe.projectID }}/packages/helm/stable"
    path: "''"
    targetRevision: {{ .Values.simpl_fe.targetRevision }}
    chart: {{ .Values.simpl_fe.chart_name }}
    helm:
      valueFiles:
        {{- range .Values.simpl_fe.valueFiles }}
        - $values/app-values/Simpl-fe/{{ . }}
        {{- end }}
      values: |
        ingress:
          issuer: {{ .Values.cluster.issuer }}
        hostFe: authority.fe.{{ .Values.namespaceTag }}.{{ .Values.domainSuffix }}
        cors:
          allowOrigin: https://authority.fe.{{ .Values.namespaceTag }}.{{ .Values.domainSuffix }},https://authority.be.{{ .Values.namespaceTag }}.{{ .Values.domainSuffix }},http://localhost:4202,http://localhost:4203,http://localhost:3000
        env:
        - name: API_URL
          value: "https://authority.be.{{ .Values.namespaceTag }}.{{ .Values.domainSuffix }}"
        - name: KEYCLOAK_URL
          value: "https://authority.be.{{ .Values.namespaceTag }}.{{ .Values.domainSuffix }}/auth"
        - name: KEYCLOAK_REALM
          value: "authority"
        - name: KEYCLOAK_CLIENT_ID
          value: "frontend-cli"
        {{- if .Values.simpl_fe.resources }}
        resources: {{- toYaml .Values.simpl_fe.resources | nindent 10 }}
        {{- end }}
  - repoURL: "https://code.europa.eu/api/v4/projects/{{ .Values.sap.projectID }}/packages/helm/stable"
    path: ''
    targetRevision: {{ .Values.sap.targetRevision }}
    chart: {{ .Values.sap.chart_name }}
    helm:
      valueFiles:
        {{- range .Values.sap.valueFiles }}
        - $values/app-values/SAP/{{ . }}
        {{- end }}
      values: |
        podAnnotations:
          vault.security.banzaicloud.io/vault-addr: {{ .Values.hashicorp.service }}
          vault.security.banzaicloud.io/vault-role: {{ .Values.hashicorp.role }}
        db:
          url: "jdbc:postgresql://pg-cluster.{{ .Values.cluster.commonToolsNamespace }}.svc.cluster.local:5432/{{ .Values.cluster.namespace }}_securityattributesprovider"
          username: {{ .Values.cluster.namespace }}_securityattributesprovider
          password: vault:{{ .Values.hashicorp.secretEngine }}/data/{{ .Values.cluster.namespace }}-postgres-passwords#{{ .Values.cluster.namespace }}-securityattributesprovider
        microservices:
          identityProviderUrl: http://identity-provider.{{ .Values.cluster.namespace }}.svc.cluster.local:8080
          onboardingUrl: http://onboarding.{{ .Values.cluster.namespace }}.svc.cluster.local:8080
        {{- if .Values.sap.resources }}
        resources: {{- toYaml .Values.sap.resources | nindent 10 }}
        {{- end }}
  - repoURL: "https://code.europa.eu/api/v4/projects/{{ .Values.users_roles.projectID }}/packages/helm/stable"
    path: ''
    targetRevision: {{ .Values.users_roles.targetRevision }}
    chart: {{ .Values.users_roles.chart_name }}
    helm:
      valueFiles:
        {{- range .Values.users_roles.valueFiles }}
        - $values/app-values/Users-Roles/{{ . }}
        {{- end }}
      values: |
        podAnnotations:
          vault.security.banzaicloud.io/vault-addr: {{ .Values.hashicorp.service }}
          vault.security.banzaicloud.io/vault-role: {{ .Values.hashicorp.role }}
        hostT1: authority.be.{{ .Values.namespaceTag }}.{{ .Values.domainSuffix }}
        authorityHostT2: tls.authority.{{ .Values.namespaceTag }}.{{ .Values.domainSuffix }}
        global:
          ingress:
            issuer: {{ .Values.cluster.issuer }}
        keycloak:
          master:
            password: vault:{{ .Values.hashicorp.secretEngine }}/data/{{ .Values.cluster.namespace }}-keycloak#admin
        db:
          url: "jdbc:postgresql://pg-cluster.{{ .Values.cluster.commonToolsNamespace }}.svc.cluster.local:5432/{{ .Values.cluster.namespace }}_usersroles"
          username: {{ .Values.cluster.namespace }}_usersroles
          password: vault:{{ .Values.hashicorp.secretEngine }}/data/{{ .Values.cluster.namespace }}-postgres-passwords#{{ .Values.cluster.namespace }}-usersroles
        env:
        - name: KAFKA_USERSROLES
          value: "vault:{{ .Values.hashicorp.secretEngine }}/data/{{ .Values.cluster.commonToolsNamespace }}-kafka-credentials#{{ .Values.cluster.namespace }}_usersroles"
        redis:
          host: "redis-master.{{ .Values.cluster.commonToolsNamespace }}.svc.cluster.local"
          password: vault:{{ .Values.hashicorp.secretEngine }}/data/{{ .Values.cluster.commonToolsNamespace }}-redis#redis
        microservices:
          authenticationProviderUrl: http://authentication-provider.{{ .Values.cluster.namespace }}.svc.cluster.local:8080
        kafkaConfig:
          spring:
            kafka:
              bootstrap-servers: kafka.{{ .Values.cluster.commonToolsNamespace }}.svc.cluster.local:9092
              consumer:
                group-id: users-roles
                properties:
                  security.protocol: SASL_PLAINTEXT
                  sasl.mechanism: PLAIN
                  sasl.jaas.config: org.apache.kafka.common.security.plain.PlainLoginModule required username="{{ .Values.cluster.namespace }}_usersroles" password="${KAFKA_USERSROLES}";
              admin:
                auto-create: true
          simpl:
            kafka:
              topic:
                prefix: iaa.{{ .Values.cluster.namespace }}.
              inbox:
                topic:
                  pattern: iaa\.{{ .Values.cluster.namespace }}\..*
        {{- if .Values.users_roles.resources }}
        resources: {{- toYaml .Values.users_roles.resources | nindent 10 }}
        {{- end }}
  {{- if .Values.xsfc_catalogue.enabled }}      
  - repoURL: "https://code.europa.eu/api/v4/projects/{{ .Values.xsfc_catalogue.projectID }}/packages/helm/stable"
    path: ''
    targetRevision: {{ .Values.xsfc_catalogue.targetRevision }}
    chart: {{ .Values.xsfc_catalogue.chart_name }}
    helm:
      valueFiles:
        {{- range .Values.xsfc_catalogue.valueFiles }}
        - $values/app-values/xsfc-catalogue/{{ . }}
        {{- end }}
      values: |
        global:
          ingress:
            issuer: {{ .Values.cluster.issuer }}
        ingress:
          hosts:
            - host: xsfc-server-service.{{ .Values.namespaceTag }}.{{ .Values.domainSuffix }}
              paths:
                - path: /
                  pathType: Prefix
          tls:
            - secretName: xsfc-server-tls
              hosts:
                - xsfc-server-service.{{ .Values.namespaceTag }}.{{ .Values.domainSuffix }}
          annotations: 
            cert-manager.io/cluster-issuer: {{ .Values.cluster.issuer }}
        hashicorp:
          service: {{ .Values.hashicorp.service }}
          role: {{ .Values.hashicorp.role }}
          secretEngine: {{ .Values.hashicorp.secretEngine }}
        neo4j:
          {{- if .Values.xsfc_catalogue.resources }}
          resources: {{- toYaml .Values.xsfc_catalogue.resources | nindent 10 }}
          {{- end }}
    {{- end }}      
  - repoURL: "https://code.europa.eu/api/v4/projects/{{ .Values.onboarding.projectID }}/packages/helm/stable"
    path: ''
    targetRevision: {{ .Values.onboarding.targetRevision }}
    chart: {{ .Values.onboarding.chart_name }}
    helm:
      valueFiles:
        {{- range .Values.onboarding.valueFiles }}
        - $values/app-values/onboarding/{{ . }}
        {{- end }}
      values: |
        podAnnotations:
          vault.security.banzaicloud.io/vault-addr: {{ .Values.hashicorp.service }}
          vault.security.banzaicloud.io/vault-role: {{ .Values.hashicorp.role }}
        db:
          url: "jdbc:postgresql://pg-cluster.{{ .Values.cluster.commonToolsNamespace }}.svc.cluster.local:5432/{{ .Values.cluster.namespace }}_onboarding"
          username: {{ .Values.cluster.namespace }}_onboarding
          password: vault:{{ .Values.hashicorp.secretEngine }}/data/{{ .Values.cluster.namespace }}-postgres-passwords#{{ .Values.cluster.namespace }}-onboarding
        env:
        - name: KAFKA_ONBOARDING
          value: "vault:{{ .Values.hashicorp.secretEngine }}/data/{{ .Values.cluster.commonToolsNamespace }}-kafka-credentials#{{ .Values.cluster.namespace }}_onboarding"
        microservices:
          identityProviderUrl: http://identity-provider.{{ .Values.cluster.namespace }}.svc.cluster.local:8080
          usersRolesUrl: http://users-roles.{{ .Values.cluster.namespace }}.svc.cluster.local:8080
        kafkaConfig:
        spring:
          kafka:
            bootstrap-servers: kafka.{{ .Values.cluster.commonToolsNamespace }}.svc.cluster.local:9092
            producer:
              properties:
                security.protocol: SASL_PLAINTEXT
                sasl.mechanism: PLAIN
                sasl.jaas.config: org.apache.kafka.common.security.plain.PlainLoginModule required username="{{ .Values.cluster.namespace }}_onboarding" password="${KAFKA_ONBOARDING}";
            admin:
              auto-create: true
        simpl:
          kafka:
            topic:
              prefix: iaa.{{ .Values.cluster.namespace }}.
        {{- if .Values.onboarding.resources }}
        resources: {{- toYaml .Values.onboarding.resources | nindent 10 }}
        {{- end }}
  - repoURL: "https://code.europa.eu/api/v4/projects/{{ .Values.tier2_gateway.projectID }}/packages/helm/stable"
    path: ''
    targetRevision: {{ .Values.tier2_gateway.targetRevision }}
    chart: {{ .Values.tier2_gateway.chart_name }}
    helm:
      valueFiles:
        {{- range .Values.tier2_gateway.valueFiles }}
        - $values/app-values/tier2-gateway/{{ . }}
        {{- end }}
      values: |
        podAnnotations:
          vault.security.banzaicloud.io/vault-addr: {{ .Values.hashicorp.service }}
          vault.security.banzaicloud.io/vault-role: {{ .Values.hashicorp.role }}
        env:
        - name: KAFKA_TIER2GW
          value: "vault:{{ .Values.hashicorp.secretEngine }}/data/{{ .Values.cluster.commonToolsNamespace }}-kafka-credentials#{{ .Values.cluster.namespace }}_tier2gw"
        global:
          cors:
            allowOrigin: https://authority.fe.{{ .Values.namespaceTag }}.{{ .Values.domainSuffix }},https://authority.be.{{ .Values.namespaceTag }}.{{ .Values.domainSuffix }},http://localhost:4202,http://localhost:3000
        microservices:
          usersRolesUrl: http://users-roles.{{ .Values.cluster.namespace }}.svc.cluster.local:8080
          keycloakUrl: http://keycloak.{{ .Values.cluster.namespace }}.svc.cluster.local
          securityAttributesProviderUrl: http://security-attributes-provider.{{ .Values.cluster.namespace }}.svc.cluster.local:8080
          identityProviderUrl: http://identity-provider.{{ .Values.cluster.namespace }}.svc.cluster.local:8080
          authenticationProviderUrl: http://authentication-provider.{{ .Values.cluster.namespace }}.svc.cluster.local:8080
        redis:
          host: "redis-master.{{ .Values.cluster.commonToolsNamespace }}.svc.cluster.local"
          password: vault:{{ .Values.hashicorp.secretEngine }}/data/{{ .Values.cluster.commonToolsNamespace }}-redis#redis
        hostT2: tls.authority.{{ .Values.namespaceTag }}.{{ .Values.domainSuffix }}

        appConfig:
          spring:
            cloud:
              gateway:
                routes:
                  - id: sap
                    uri: ${sap.url}
                    predicates:
                      - Path=/sap-api/mtls/**
                    filters:
                      - StripPrefix=1
                  - id: sap-v1
                    uri: ${sap.url}
                    predicates:
                      - Path=/sapApi/v1/mtls/**
                    filters:
                      - StripPrefix=1
                  - id: identity-provider
                    uri: ${identity-provider.url}
                    predicates:
                      - Path=/identity-api/mtls/**
                    filters:
                      - StripPrefix=1
                  - id: identity-provider-v1
                    uri: ${identity-provider.url}
                    predicates:
                      - Path=/identityApi/v1/mtls/**
                    filters:
                      - StripPrefix=1
                  - id: identity-provider-v1-tmp
                    uri: ${identity-provider.url}
                    predicates:
                      - Path=/identity-api/v1/mtls/**
                    filters:
                      - StripPrefix=1
                  - id: users-roles
                    uri: ${users-roles.url}
                    predicates:
                      - Path=/user-api/mtls/**
                    filters:
                      - StripPrefix=1
                  - id: users-roles-v1
                    uri: ${users-roles.url}
                    predicates:
                      - Path=/userApi/v1/mtls/**
                    filters:
                      - StripPrefix=1
                  - id: fc-service
                    uri: "http://xsfc-service.{{ .Values.cluster.namespace }}.svc.cluster.local:8081"
                    predicates:
                      - Path=/fc/**
                    filters:
                      - StripPrefix=1
                  - id: adapter-service
                    uri: "http://adapter-service.{{ .Values.cluster.namespace }}.svc.cluster.local:8084"
                    predicates:
                      - Path=/adapter/**
                    filters:
                      - StripPrefix=1
        kafkaConfig:
          spring:
            kafka:
              bootstrap-servers: kafka.{{ .Values.cluster.commonToolsNamespace }}.svc.cluster.local:9092
              consumer:
                properties:
                  security.protocol: SASL_PLAINTEXT
                  sasl.mechanism: PLAIN
                  sasl.jaas.config: org.apache.kafka.common.security.plain.PlainLoginModule required username="{{ .Values.cluster.namespace }}_tier2gw" password="${KAFKA_TIER2GW}";
              admin:
                auto-create: true
          simpl:
            kafka:
              topic:
                prefix: iaa.{{ .Values.cluster.namespace }}.
        {{- if .Values.tier2_gateway.resources }}
        resources: {{- toYaml .Values.tier2_gateway.resources | nindent 10 }}
        {{- end }}
  {{- if .Values.adapter.enabled }}                    
  - repoURL: "https://code.europa.eu/api/v4/projects/{{ .Values.adapter.projectID }}/packages/helm/stable"
    path: ''
    targetRevision: {{ .Values.adapter.targetRevision }}
    chart: {{ .Values.adapter.chart_name }}
    helm:
      releaseName: {{ .Values.adapter.fullnameOverride }}
      valueFiles:
        {{- range .Values.adapter.valueFiles }}
        - $values/app-values/adapter/{{ . }}
        {{- end }}
      values: |
        ingress:
          host: adapter.{{ .Values.namespaceTag }}.{{ .Values.domainSuffix }}
        hashicorp:
          service: {{ .Values.hashicorp.service }}
          role: {{ .Values.hashicorp.role }}
          secretEngine: {{ .Values.hashicorp.secretEngine }}
  {{- end }}        
  - repoURL: "https://code.europa.eu/api/v4/projects/{{ .Values.identity_provider.projectID }}/packages/helm/stable"
    path: ''
    targetRevision: {{ .Values.identity_provider.targetRevision }}
    chart: {{ .Values.identity_provider.chart_name }}
    helm:
      valueFiles:
        {{- range .Values.identity_provider.valueFiles }}
        - $values/app-values/identity-provider/{{ . }}
        {{- end }}
      values: |
        podAnnotations:
          vault.security.banzaicloud.io/vault-addr: {{ .Values.hashicorp.service }}
          vault.security.banzaicloud.io/vault-role: {{ .Values.hashicorp.role }}
        hostT2: tls.authority.{{ .Values.namespaceTag }}.{{ .Values.domainSuffix }}
        db:
          url: "jdbc:postgresql://pg-cluster.{{ .Values.cluster.commonToolsNamespace }}.svc.cluster.local:5432/{{ .Values.cluster.namespace }}_identityprovider"
          username: {{ .Values.cluster.namespace }}_identityprovider
          password: vault:{{ .Values.hashicorp.secretEngine }}/data/{{ .Values.cluster.namespace }}-postgres-passwords#{{ .Values.cluster.namespace }}-identityprovider
        redis:
          host: "redis-master.{{ .Values.cluster.commonToolsNamespace }}.svc.cluster.local"
          password: vault:{{ .Values.hashicorp.secretEngine }}/data/{{ .Values.cluster.commonToolsNamespace }}-redis#redis
        global:
          hostBe: authority.be.{{ .Values.namespaceTag }}.{{ .Values.domainSuffix }}
          hostFe: authority.fe.{{ .Values.namespaceTag }}.{{ .Values.domainSuffix }}
          authorityUrl: https://authority.be.{{ .Values.namespaceTag }}.{{ .Values.domainSuffix }}
          cors:
            allowOrigin: https://authority.fe.{{ .Values.namespaceTag }}.{{ .Values.domainSuffix }},http://localhost:4202,http://localhost:3000
        microservices:
          usersRolesUrl: http://users-roles.{{ .Values.cluster.namespace }}.svc.cluster.local:8080
          securityAttributesProviderUrl: http://security-attributes-provider.{{ .Values.cluster.namespace }}.svc.cluster.local:8080
          onboardingUrl: http://onboarding.{{ .Values.cluster.namespace }}.svc.cluster.local:8080
          authenticationProviderUrl: http://authentication-provider.{{ .Values.cluster.namespace }}.svc.cluster.local:8080
        ejbca:
          enrollConfig:
            url: "https://ejbca-community-helm.{{ .Values.cluster.namespace }}.svc.cluster.local:30443"
          keystore:
            password: vault:{{ .Values.hashicorp.secretEngine }}/data/{{ .Values.cluster.namespace }}-ejbca#keystorepass
        {{- if .Values.identity_provider.resources }}
        resources: {{- toYaml .Values.identity_provider.resources | nindent 10 }}
        {{- end }}
  - repoURL: "https://code.europa.eu/api/v4/projects/{{ .Values.auth_provider.projectID }}/packages/helm/stable"
    path: ''
    targetRevision: {{ .Values.auth_provider.targetRevision }}
    chart: {{ .Values.auth_provider.chart_name }}
    helm:
      valueFiles:
        {{- range .Values.auth_provider.valueFiles }}
        - $values/app-values/auth-provider/{{ . }}
        {{- end }}
      values: |
        podAnnotations:
          vault.security.banzaicloud.io/vault-addr: {{ .Values.hashicorp.service }}
          vault.security.banzaicloud.io/vault-role: {{ .Values.hashicorp.role }}
        urlAuthorityT2: "tls.authority.{{ .Values.namespaceTag }}.{{ .Values.domainSuffix }}"
        db:
          url: "jdbc:postgresql://pg-cluster.{{ .Values.cluster.commonToolsNamespace }}.svc.cluster.local:5432/{{ .Values.cluster.namespace }}_authenticationprovider"
          username: {{ .Values.cluster.namespace }}_authenticationprovider
          password: vault:{{ .Values.hashicorp.secretEngine }}/data/{{ .Values.cluster.namespace }}-postgres-passwords#{{ .Values.cluster.namespace }}-authenticationprovider
        env:
        - name: KAFKA_AUTHPROVIDER
          value: "vault:{{ .Values.hashicorp.secretEngine }}/data/{{ .Values.cluster.commonToolsNamespace }}-kafka-credentials#{{ .Values.cluster.namespace }}_authprovider"
        microservices:
          usersRolesUrl: http://users-roles.{{ .Values.cluster.namespace }}.svc.cluster.local:8080
        simpl:
          certificate:
            san: "tls.authority.{{ .Values.namespaceTag }}.{{ .Values.domainSuffix }}"
        redis:
          host: "redis-master.{{ .Values.cluster.commonToolsNamespace }}.svc.cluster.local"
          password: vault:{{ .Values.hashicorp.secretEngine }}/data/{{ .Values.cluster.commonToolsNamespace }}-redis#redis
        kafkaConfig:
          spring:
            kafka:
              bootstrap-servers: kafka.{{ .Values.cluster.commonToolsNamespace }}.svc.cluster.local:9092
              producer:
                properties:
                  security.protocol: SASL_PLAINTEXT
                  sasl.mechanism: PLAIN
                  sasl.jaas.config: org.apache.kafka.common.security.plain.PlainLoginModule required username="{{ .Values.cluster.namespace }}_authprovider" password="${KAFKA_AUTHPROVIDER}";
              admin:
                auto-create: true
          simpl:
            kafka:
              topic:
                prefix: iaa.{{ .Values.cluster.namespace }}.
        {{- if .Values.auth_provider.resources }}
        resources: {{- toYaml .Values.auth_provider.resources | nindent 10 }}
        {{- end }}
  {{- if .Values.monitoring.enabled }}
  - repoURL: "https://code.europa.eu/api/v4/projects/{{ .Values.monitoring.projectID }}/packages/helm/stable"
    path: ''
    targetRevision: {{ .Values.monitoring.targetRevision }}
    chart: {{ .Values.monitoring.chart_name }}
    helm:
      releaseName: {{ .Values.monitoring.fullnameOverride }}
      valueFiles:
        {{- range .Values.monitoring.valueFiles }}
        - $values/app-values/monitoring/{{ . }}
        {{- end }}
      values: |
        clusterIssuer: {{ .Values.cluster.issuer }}
        domainSuffix: {{ .Values.domainSuffix }}
        namespaceTag: {{ .Values.namespaceTag }}
        mainNamespace: {{ .Values.cluster.commonToolsNamespace }}
        heartbeat:
          services:
            heartbeat.monitors:
            - type: tcp
              name: Elasticsearch Service
              id: elasticsearch:9200
              schedule: '@every 5s'
              hosts: ["elastic-elasticsearch-es-http.{{ .Values.cluster.commonToolsNamespace }}.svc:9200"]
            - type: tcp
              name: Kibana GUI
              id: kibana:443
              schedule: '@every 5s'
              hosts: ["kibana.{{ .Values.cluster.commonToolsNamespace }}.{{ .Values.domainSuffix }}:443"]
            - type: icmp
              id: kibana/icmp
              name: Kibana ICMP
              hosts: ["elastic-kibana-kb-http.{{ .Values.cluster.commonToolsNamespace }}.svc"]
              schedule: '*/5 * * * * * *'
  {{- end }}
  - repoURL: "https://code.europa.eu/api/v4/projects/{{ .Values.simpl_cli.projectID }}/packages/helm/stable"
    path: ''
    targetRevision: {{ .Values.simpl_cli.targetRevision }}
    chart: {{ .Values.simpl_cli.chart_name }}
    helm:
      releaseName: {{ .Values.simpl_cli.fullnameOverride }}
      valueFiles:
        {{- range .Values.simpl_cli.valueFiles }}
        - $values/app-values/simpl-cli/{{ . }}
        {{- end }}
      values: |
        podAnnotations:
          vault.security.banzaicloud.io/vault-addr: {{ .Values.hashicorp.service }}
          vault.security.banzaicloud.io/vault-role: {{ .Values.hashicorp.role }}
        initAuthority:
          hostT1: authority.be.{{ .Values.namespaceTag }}.{{ .Values.domainSuffix }}
          csr:
            cn: tls.authority.{{ .Values.namespaceTag }}.{{ .Values.domainSuffix }}
            o: {{ .Values.namespaceTag }}
            ou: {{ .Values.namespaceTag }}
          ejbca:
            internalHost: ejbca-community-helm.{{ .Values.cluster.namespace }}.svc.cluster.local
          keycloak:
            internalHost: "keycloak.{{ .Values.cluster.namespace }}.svc.cluster.local"
            url: "https://authority.be.{{ .Values.namespaceTag }}.{{ .Values.domainSuffix }}/auth"
            master:
              password: vault:{{ .Values.hashicorp.secretEngine }}/data/{{ .Values.cluster.namespace }}-keycloak#admin
          microservices:
            usersRolesUrl: https://authority.be.{{ .Values.namespaceTag }}.{{ .Values.domainSuffix }}/cli/userApi/v1/
            securityAttributesProviderUrl: https://authority.be.{{ .Values.namespaceTag }}.{{ .Values.domainSuffix }}/cli/sapApi/v1/
            identityProviderUrl: https://authority.be.{{ .Values.namespaceTag }}.{{ .Values.domainSuffix }}/cli/identityApi/v1/
            authenticationProviderUrl: https://authority.be.{{ .Values.namespaceTag }}.{{ .Values.domainSuffix }}/cli/authApi/v1/